// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  firstName   String   
  lastName    String
  email       String   @unique()
  mobile      String  @unique()
  mobileRegion  String 
  isActive      Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Image       Image[]
  UserImageMap  UserImageMap[]
  BookUserMap     BookUserMap[]
}

model Image {
  id                  String                   @id @default(uuid())
  name                String
  s3Path              String
  slug                String                @unique
  uploadedByUserId    String
  isActive            Int                   @default(1)
  uploaded            Int                   @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())
  User                User                  @relation(fields: [uploadedByUserId], references: [id])
  
  UserImageMap  UserImageMap[]
  BookStageImageMap   BookStageImageMap[]


  @@index([uploadedByUserId], name: "FK_IMAGE_UPLOADED_BY_USER_ID_idx")
  @@index([createdAt])
}

model UserImageMap {
  id        Int   @id @default(autoincrement())
  userId    String
  imageId   String
  isActive  String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())

  User                User                  @relation(fields: [userId], references: [id])
  Image                Image                  @relation(fields: [imageId], references: [id])

}

model Book {
  id                  String                   @id @default(uuid())
  title               String
  description         String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())


  // *********************************  draft details to be added  ****************************

  BookStage           BookStage[]
  BookUserMap     BookUserMap[]
}

model BookUserMap {
  id      Int           @id @default(autoincrement())
  bookId  String
  userId  String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())

  User      User     @relation(fields: [userId], references: [id])
  Book         Book       @relation(fields: [bookId], references: [id])

}

model BookStage {
  id      String           @id @default(uuid())
  bookId  String
  stage   Int
  isAccepted  Boolean   @default(false)
  isActive  Boolean   @default(false)
  isWorking    Boolean   @default(false)
  isCompleted  Boolean   @default(false)
  isSubmitted  Boolean   @default(false)
  requirement        String     

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())

  Book         Book       @relation(fields: [bookId], references: [id])
  BookStageImageMap   BookStageImageMap[]
}


model BookStageImageMap {
  id      Int           @id @default(autoincrement())
  bookStageId  String
  imageId     String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())

  Image                Image                  @relation(fields: [imageId], references: [id])
  BookStage         BookStage                  @relation(fields: [bookStageId], references: [id])
}