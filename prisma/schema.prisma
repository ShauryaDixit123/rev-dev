// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  firstName   String   
  lastName    String
  email       String   @unique()
  mobile      String  @unique()
  password    String
  mobileRegion  String 
  accessToken   String  @default(uuid()) @unique()
  profileImageId  String?  @unique()      
  isActive      Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Image           Image[]       @relation(name:"FK_USER_IMAGE_ID")
  UserImageMap    UserImageMap[]
  BookUserMap     BookUserMap[]
  UserRoleMap     UserRoleMap?
  ProfileImage    Image?       @relation(name: "FK_PROFILE_IMAGE_ID",fields: [profileImageId],references: [id])
  
  @@index([createdAt])
  @@index([accessToken])
}

model Image {
  id                  String                   @id @default(uuid())
  name                String
  s3Path              String
  mimeType            String
  uploadedBy    String
  isActive            Int                   @default(1)
  uploaded            Int                   @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())
  User                User                  @relation(name: "FK_USER_IMAGE_ID",fields: [uploadedBy], references: [id])
  
  UserImageMap        UserImageMap[]
  BookStageImageMap   BookStageImageMap[]
  Book                Book?
  UserImage           User?                  @relation(name: "FK_PROFILE_IMAGE_ID")            
  @@index([uploadedBy], name: "FK_IMAGE_UPLOADED_BY_USER_ID_idx")
  @@index([createdAt])
}

model UserImageMap {
  id        Int   @id @default(autoincrement())
  userId    String
  imageId   String
  isActive  Int       
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())

  User                User                  @relation(fields: [userId], references: [id])
  Image                Image                  @relation(fields: [imageId], references: [id])

}

model Book {
  id                  String                   @id @default(uuid())
  title               String
  description         String
  draftId             String                @unique()
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())


  // *********************************  draft details to be added  ****************************

  BookStage           BookStage[]
  BookUserMap     BookUserMap[]
  BookDraftCharacter  BookDraftCharacter[]
  Image                Image                  @relation(fields: [draftId], references: [id])

  @@index([id])
}

model BookUserMap {
  id      Int           @id @default(autoincrement())
  bookId  String
  userId  String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())

  User      User     @relation(fields: [userId], references: [id])
  Book         Book       @relation(fields: [bookId], references: [id])

  @@index([userId], name : "FK_BOOK_USER_ID_idx")
  @@unique([bookId,userId])

}

model BookStage {
  bookId  String
  stageId   Int
  isAccepted  Boolean   @default(false) // when stage has been submitted and reviewed by author
  isActive  Boolean   @default(false) // when stage is applied 
  isWorking    Boolean   @default(false) // work on stage is in progress
  isCompleted  Boolean   @default(false) // is stage completed by concerned party
  isSubmitted  Boolean   @default(false) // is stage submitted by concerned party
  requirements        String     

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())

  BookStageImageMap   BookStageImageMap[]
  
  Book         Book       @relation(fields: [bookId], references: [id])
  
  @@index([bookId], name : "FK_BOOK_ID_STAGE_idx")
  @@id([bookId,stageId])
}


model BookStageImageMap {
  id      Int           @id @default(autoincrement())
  bookId  String
  stageId   Int
  imageId     String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())

  Image                Image                  @relation(fields: [imageId], references: [id])
  BookStage         BookStage                  @relation(fields: [bookId,stageId], references: [bookId,stageId])
  
  @@index([bookId,stageId])
}

model BookDraftCharacter {
  id      String    @id @default(uuid())
  bookId  String
  pageNo  String
  character String
  prevId  String?   @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())

  BookDraftCharacterChanges BookDraftCharacterChanges[]

  Book         Book       @relation(fields: [bookId], references: [id])
  prevChar  BookDraftCharacter? @relation("PREV_CHAR_BK_CHR_ID",fields: [prevId],references: [id])
  nextChar BookDraftCharacter? @relation("PREV_CHAR_BK_CHR_ID")

  @@index([pageNo,bookId])
}

model BookDraftCharacterChanges {
  id      String    @id @default(uuid())
  bookDraftCharacterId    String    
  operation Int
  pos       Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())

  BookDraftCharacter BookDraftCharacter @relation(fields: [bookDraftCharacterId],references: [id])
  
  @@index([bookDraftCharacterId])

}


// *****************************  ACL TABLES STARTED ****************************************

model RoleMaster {
  id                   Int              @id
  role                 String           @unique
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now())

  UserRoleMap   UserRoleMap[]
  ResourcePermission  ResourcePermission[]
  ResourceAttributePermission   ResourceAttributePermission[]

}

model Resource {
  id      Int         @id @default(autoincrement())
  name    String      @unique()
  des     String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now())

  ResourceAttribute   ResourceAttribute[]
  ResourcePermission  ResourcePermission[]
}

model ResourceAttribute {
  id      Int         @id @default(autoincrement())
  name    String
  value   String
  resourceId   Int
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now())

  ResourceAttributePermission   ResourceAttributePermission[]
  Resource Resource @relation(fields: [resourceId], references: [id])
  
  @@index([resourceId], name: "FK_RA_RESOURCE_ID_idx")
  @@unique([resourceId,name,value])
}
 model ResourcePermission {
  id      Int         @id @default(autoincrement())
  roleId  Int        
  resourceId  Int
  action      Int
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now())

  Resource Resource @relation(fields: [resourceId], references: [id])
  Role RoleMaster @relation(fields: [roleId], references: [id])

  @@index([resourceId], name: "FK_RP_RESOURCE_ID_idx")
}

model ResourceAttributePermission {
  id      Int         @id @default(autoincrement())
  roleId    Int
  resourceAttributeId  Int
  action      Int
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now())

  Role RoleMaster @relation(fields: [roleId], references: [id])
  ResourceAttribute   ResourceAttribute @relation(fields: [resourceAttributeId], references: [id])

  @@index([resourceAttributeId], name : "FK_RAP_RESOURCE_ATTRIBUTE_ID_idx")
}


model UserRoleMap {
  id      Int       @id @default(autoincrement())
  userId         String   @unique
  roleId         Int
  createdAt      DateTime       @default(now())


  Role RoleMaster @relation(fields: [roleId], references: [id])
  User           User           @relation(fields: [userId], references: [id])


  @@unique([userId, roleId], name: "UNIQUE_USER_ROLE_ID")
  @@index([roleId], name: "FK_ROLE_MAP_ROLE_ID_idx")
  @@index([userId], name: "FK_ROLE_MAP_USER_ID_idx")
}
